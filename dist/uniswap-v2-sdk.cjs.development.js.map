{"version":3,"file":"uniswap-v2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  BASEGOERLI = 84531,\n  LATESTNET = 418,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.BASEGOERLI]: new Token(ChainId.BASEGOERLI, '0xF2449390431c20D7e8b295AC654293eb38a38bC2', 18, 'WETH', 'Wrapped ETH'),\n  [ChainId.LATESTNET]: new Token(ChainId.LATESTNET, '0x0512E93039a469Ef0D0140Dd0f5C6C7F90e61e16', 18, 'WTLA', 'Wrapped TLA'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token, _FACTORY_ADDRESS = FACTORY_ADDRESS, _INIT_CODE_HASH = INIT_CODE_HASH): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            _FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            _INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, _FACTORY_ADDRESS = FACTORY_ADDRESS, _INIT_CODE_HASH = INIT_CODE_HASH) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, _FACTORY_ADDRESS, _INIT_CODE_HASH),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, _FACTORY_ADDRESS = FACTORY_ADDRESS, _INIT_CODE_HASH = INIT_CODE_HASH): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), _FACTORY_ADDRESS, _INIT_CODE_HASH)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, _FACTORY_ADDRESS = FACTORY_ADDRESS, _INIT_CODE_HASH = INIT_CODE_HASH): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), _FACTORY_ADDRESS, _INIT_CODE_HASH)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO, FACTORY_ADDRESS, INIT_CODE_HASH } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType, _FACTORY_ADDRESS = FACTORY_ADDRESS, _INIT_CODE_HASH = INIT_CODE_HASH) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], _FACTORY_ADDRESS, _INIT_CODE_HASH)\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], _FACTORY_ADDRESS, _INIT_CODE_HASH)\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = [],\n    _FACTORY_ADDRESS = FACTORY_ADDRESS,\n    _INIT_CODE_HASH = INIT_CODE_HASH\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn, _FACTORY_ADDRESS, _INIT_CODE_HASH)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = [],\n    _FACTORY_ADDRESS = FACTORY_ADDRESS,\n    _INIT_CODE_HASH = INIT_CODE_HASH\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut, _FACTORY_ADDRESS, _INIT_CODE_HASH)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades,\n          _FACTORY_ADDRESS,\n          _INIT_CODE_HASH\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId, FACTORY_ADDRESS, INIT_CODE_HASH } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)), _FACTORY_ADDRESS = FACTORY_ADDRESS, _INIT_CODE_HASH = INIT_CODE_HASH\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, _FACTORY_ADDRESS, _INIT_CODE_HASH)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), _FACTORY_ADDRESS, _INIT_CODE_HASH)\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","process","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","_Currency","chainId","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","BASEGOERLI","LATESTNET","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","_step","done","_step$value","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","_FACTORY_ADDRESS","_INIT_CODE_HASH","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","undefined","_PAIR_ADDRESS_CACHE2","_extends2","_extends3","_extends","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","apply","arguments","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","_pair$getOutputAmount","nextPair","_pair$getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","_ref","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","originalAmountOut","_ref2$maxNumResults","_ref2","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Promise","resolve","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","e","reject","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}